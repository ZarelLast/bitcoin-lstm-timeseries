# -*- coding: utf-8 -*-
"""(Dicoding) Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xUPpgeOYzPU28yQNvCmSSfYPAuUw-4Qe

Dataset: [Bitcoin Stock Data](https://www.kaggle.com/datasets/deepakvedantam/bitcoin-stock-data) <br>
Jumlah Baris: 2401 Baris <br>
Jumlah Kolom: 7 Kolom
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

from google.colab import drive
drive.mount('/content/drive')

data_btc = pd.read_csv('/content/drive/MyDrive/datasets/BTC-USD (1).csv')
data_btc.head()

data_btc.shape

data_btc.info()

data_btc.describe()

data_btc.isnull().sum()

data_btc = data_btc.dropna().reset_index(drop=True)
data_btc.isnull().sum()

data_btc['Date'] = pd.to_datetime(data_btc['Date'])

data_btc = data_btc.drop(['High','Low','Close','Adj Close','Volume'], axis=1)

plt.figure(figsize=(15, 5))
plt.plot(data_btc['Date'], data_btc['Open'])
plt.title('BTC Open', fontsize=20)

data_btc

from sklearn.preprocessing import MinMaxScaler
data_btc_scaled = data_btc.copy()

scaler = MinMaxScaler()
scaler.fit(data_btc_scaled[['Open']])
data_btc_scaled[['Open']] = scaler.transform(data_btc_scaled[['Open']])
data_btc_scaled

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(data_btc['Date'], data_btc_scaled['Open'], test_size=0.2, shuffle=False)

print(len(x_train), len(x_test), len(y_train), len(y_test))

x_test

y_test

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

y_train_set = windowed_dataset(y_train, window_size=3, batch_size=100, shuffle_buffer=1000)
y_test_set = windowed_dataset(y_test, window_size=3, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(32, return_sequences=True),
  tf.keras.layers.Dropout(0.5),
  tf.keras.layers.LSTM(16, return_sequences=True),
  tf.keras.layers.Dense(8, activation="relu"),
  tf.keras.layers.Dense(1),
])

class CallbackMAE(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    threshold_mae = (data_btc_scaled['Open'].max() - data_btc_scaled['Open'].min()) * 10/100

    if(logs.get('mae')<threshold_mae and logs.get('val_mae')<threshold_mae):
      print(f"\nMAE dan Val_MAE Sudah dibawah {threshold_mae}")
      self.model.stop_training = True
callbacks = CallbackMAE()

threshold_mae = (data_btc_scaled['Open'].max() - data_btc_scaled['Open'].min()) * 10/100
threshold_mae

# optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-02, momentum=0.9)
optimizer = tf.keras.optimizers.Adam(learning_rate=0.03)
model.compile(
  loss=tf.keras.losses.Huber(),
  optimizer=optimizer,
  metrics=["mae"]
)
history = model.fit(
    y_train_set,
    epochs=100,
    batch_size=16,
    validation_data=y_test_set,
    callbacks=[callbacks],
    verbose=2,
  )

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('model mae')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['mae', 'val_mae'], loc='upper left')
plt.show()